[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TokenRefreshSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "importPath": "core.urls",
        "description": "core.urls",
        "isExtraImport": true,
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "isExtraImport": true,
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "isExtraImport": true,
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "isExtraImport": true,
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "verificar_email_valido",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "verificar_email_valido",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ErrorDetail",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "TeacherSerializer",
        "importPath": "teachers.serializers",
        "description": "teachers.serializers",
        "isExtraImport": true,
        "detail": "teachers.serializers",
        "documentation": {}
    },
    {
        "label": "TeacherSerializer",
        "importPath": "teachers.serializers",
        "description": "teachers.serializers",
        "isExtraImport": true,
        "detail": "teachers.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"accounts\"",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('O usuário deve ter um email')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True, null=False, blank=False)\n    is_teacher = models.BooleanField(default=False)\n    is_student = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []  # Campos obrigatórios para o comando createsuperuser",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Teacher(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='teacher_profile', blank=False, null=False)\n    name = models.CharField(max_length=255, blank=False, null=False)\n    age = models.PositiveIntegerField(blank=False, null=False)\n    description = models.TextField(blank=False, null=False)\n    hourly_price = models.DecimalField(max_digits=6, decimal_places=2, blank=False, null=False)\n    profile_image = models.ImageField(upload_to='teacher_images/', blank=True, null=True)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    subjects = models.ManyToManyField('Subject', related_name='teachers')",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Subject(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    def __str__(self):\n        return self.name\nclass Student(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='student_profile', blank=False, null=False)\n    name = models.CharField(max_length=255, blank=False, null=False)\n    profile_image = models.ImageField(upload_to='students_image/', blank=True, null=True)\n    create_at = models.DateTimeField(default=now)\n    update_at = models.DateTimeField(auto_now=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Student(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='student_profile', blank=False, null=False)\n    name = models.CharField(max_length=255, blank=False, null=False)\n    profile_image = models.ImageField(upload_to='students_image/', blank=True, null=True)\n    create_at = models.DateTimeField(default=now)\n    update_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f'Student: {self.name}'",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    def validate(self, attrs):\n        '''\n        # Remove o \"access\" e cria um novo campo dentro de data e salva o \"access\"\n        # Remove o \"refresh\" e cria um novo campo dentro de data e salva o \"refresh\"\n        '''\n        data = super().validate(attrs)\n        data['token'] = data.pop(\"access\")\n        data['refresh_token'] = data.pop('refresh')\n        return data",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenRefreshSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class CustomTokenRefreshSerializer(TokenRefreshSerializer):\n    refresh_token = serializers.CharField(required=True)\n    refresh = None\n    def validate(self, attrs):\n        attrs[\"refresh\"] = attrs.pop(\"refresh_token\")\n        data = super().validate(attrs)\n        data[\"token\"] = data.pop(\"access\")\n        data[\"refresh_token\"] = data.pop(\"refresh\")\n        return data\nclass CustomTokenBlacklistSerializer(TokenBlacklistSerializer):",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenBlacklistSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class CustomTokenBlacklistSerializer(TokenBlacklistSerializer):\n    refresh_token = serializers.CharField(required=True)\n    refresh = None\n    def validate(self, attrs):\n        attrs[\"refresh\"] = attrs.pop(\"refresh_token\")\n        return super().validate(attrs)\nclass UserSerializer(serializers.ModelSerializer):\n    password_confirmation = serializers.CharField(write_only=True)\n    is_teacher = serializers.BooleanField(required=False)\n    is_student = serializers.BooleanField(required=False)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    password_confirmation = serializers.CharField(write_only=True)\n    is_teacher = serializers.BooleanField(required=False)\n    is_student = serializers.BooleanField(required=False)\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'password', 'password_confirmation', 'is_teacher', 'is_student']\n    def validate(self, data):\n        if data['password'] != data['password_confirmation']:\n            raise serializers.ValidationError(\"As senhas não coincidem.\")",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "app_name = 'accounts'\nurlpatterns = [\n    path('login', TokenObtainPairView.as_view(), name='login'),\n    path('refresh', TokenRefreshView.as_view(), name='refresh'),\n    path(\"logout\", CustomTokenBlacklistView.as_view(), name=\"logout\"),\n]",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('login', TokenObtainPairView.as_view(), name='login'),\n    path('refresh', TokenRefreshView.as_view(), name='refresh'),\n    path(\"logout\", CustomTokenBlacklistView.as_view(), name=\"logout\"),\n]",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "CustomTokenBlacklistView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class CustomTokenBlacklistView(TokenBlacklistView):\n    def post(self, request, *args, **kwargs):\n        super().post(request, *args, **kwargs)\n        return Response(status=status.HTTP_205_RESET_CONTENT)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "classroom.migrations.0001_initial",
        "description": "classroom.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"accounts\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Classroom\",\n            fields=[\n                (",
        "detail": "classroom.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ClassroomConfig",
        "kind": 6,
        "importPath": "classroom.apps",
        "description": "classroom.apps",
        "peekOfCode": "class ClassroomConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"classroom\"",
        "detail": "classroom.apps",
        "documentation": {}
    },
    {
        "label": "Classroom",
        "kind": 6,
        "importPath": "classroom.models",
        "description": "classroom.models",
        "peekOfCode": "class Classroom(models.Model):\n    STATUS_CHOICES = [\n        ('scheduled', 'Scheduled'),  # nova_aula\n        ('in_progress', 'In Progress'),  # aula_em_andamento\n        ('completed', 'Completed'),  # aula_concluida\n        ('cancelled', 'Cancelled'),  # cancelada\n    ]\n    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='classrooms')\n    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name='classrooms')\n    day_of_class = models.DateField()",
        "detail": "classroom.models",
        "documentation": {}
    },
    {
        "label": "ClassroomSerializer",
        "kind": 6,
        "importPath": "classroom.serializers",
        "description": "classroom.serializers",
        "peekOfCode": "class ClassroomSerializer(serializers.ModelSerializer):\n    student_name = serializers.CharField(source='student.name', read_only=True)\n    teacher_name = serializers.CharField(source='teacher.name', read_only=True)\n    class Meta:\n        model = Classroom\n        fields = ['id', 'student', 'teacher', 'student_name', 'teacher_name', 'created_at', 'updated_at']\n        extra_kwargs = {\n            'created_at': {'read_only': True},\n            'updated_at': {'read_only': True}\n        }",
        "detail": "classroom.serializers",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"core\"",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "app_name = \"core\"\nurlpatterns = [\n    path(\"docs\", DocsView.as_view(), name=\"docs\"),\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"docs\", DocsView.as_view(), name=\"docs\"),\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "DocsView",
        "kind": 6,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "class DocsView(TemplateView):\n    template_name = \"redoc.html\"",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "setup.asgi",
        "description": "setup.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "setup.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config(\"DEBUG\", default=False, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=[], cast=Csv())\n# Application definition\nDJANGO_APPS = [",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "SECRET_KEY = config(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config(\"DEBUG\", default=False, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=[], cast=Csv())\n# Application definition\nDJANGO_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "DEBUG = config(\"DEBUG\", default=False, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=[], cast=Csv())\n# Application definition\nDJANGO_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "ALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=[], cast=Csv())\n# Application definition\nDJANGO_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "DJANGO_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\nTHIRD_PARTY_APPS = [\n    \"rest_framework\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    \"rest_framework\",\n    'rest_framework_simplejwt',\n    \"rest_framework_simplejwt.token_blacklist\",\n    \"corsheaders\",\n    \"drf_yasg\",\n]\nLOCAL_APPS = [\n    \"core.apps.CoreConfig\",\n    \"teachers.apps.TeachersConfig\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "LOCAL_APPS = [\n    \"core.apps.CoreConfig\",\n    \"teachers.apps.TeachersConfig\",\n    \"students.apps.StudentsConfig\",\n    \"accounts.apps.AccountsConfig\",\n    \"classroom.apps.ClassroomConfig\",\n]\nINSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "ROOT_URLCONF = \"setup.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "WSGI_APPLICATION = \"setup.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    \"default\": config(\n        \"DATABASE_URL\", default=\"sqlite:///\" + str(BASE_DIR / \"db.sqlite3\"), cast=dburl\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": config(\n        \"DATABASE_URL\", default=\"sqlite:///\" + str(BASE_DIR / \"db.sqlite3\"), cast=dburl\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "LANGUAGE_CODE = \"pt-br\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.User\"\nREST_FRAMEWORK = {",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.User\"\nREST_FRAMEWORK = {\n    \"COERCE_DECIMAL_TO_STRING\": False,",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.User\"\nREST_FRAMEWORK = {\n    \"COERCE_DECIMAL_TO_STRING\": False,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"accounts.User\"\nREST_FRAMEWORK = {\n    \"COERCE_DECIMAL_TO_STRING\": False,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],\n    # Estou informando ao rest_framework que o metodo de tratamento de exceções será o custom_exeption_handler, que eu criei.\n    # \"EXCEPTION_HANDLER\": \"core.handlers.custom_exception_handler\",\n}",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.User\"\nREST_FRAMEWORK = {\n    \"COERCE_DECIMAL_TO_STRING\": False,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],\n    # Estou informando ao rest_framework que o metodo de tratamento de exceções será o custom_exeption_handler, que eu criei.\n    # \"EXCEPTION_HANDLER\": \"core.handlers.custom_exception_handler\",\n}\nSIMPLE_JWT = {",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"COERCE_DECIMAL_TO_STRING\": False,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],\n    # Estou informando ao rest_framework que o metodo de tratamento de exceções será o custom_exeption_handler, que eu criei.\n    # \"EXCEPTION_HANDLER\": \"core.handlers.custom_exception_handler\",\n}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"ACCESS_TOKEN_LIFETIME_SECONDS\", cast=int)    \n    ),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"REFRESH_TOKEN_LIFETIME_SECONDS\", cast=int)\n    ),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"TOKEN_OBTAIN_SERIALIZER\": \"accounts.serializers.CustomTokenObtainPairSerializer\",",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configurações de CORS\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configurações de CORS\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "setup.settings",
        "description": "setup.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True",
        "detail": "setup.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "setup.urls",
        "description": "setup.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"TeacherHunt API\",\n        default_version='v1',\n        description=\"Documentação da API do Projeto TeacherHunt\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"kauanrl09@gmail.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "setup.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "setup.urls",
        "description": "setup.urls",
        "peekOfCode": "urlpatterns = [\n    path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"core.urls\", namespace=\"core\")),\n    path(\"api/\", include(\"teachers.urls\", namespace='teachers')),\n    path(\"api/\", include(\"students.urls\", namespace='students')),\n    path(\"api/auth/\", include(\"accounts.urls\", namespace='accounts')),\n]",
        "detail": "setup.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "setup.wsgi",
        "description": "setup.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "setup.wsgi",
        "documentation": {}
    },
    {
        "label": "StudentsConfig",
        "kind": 6,
        "importPath": "students.apps",
        "description": "students.apps",
        "peekOfCode": "class StudentsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"students\"",
        "detail": "students.apps",
        "documentation": {}
    },
    {
        "label": "StudentListPermission",
        "kind": 6,
        "importPath": "students.permissions",
        "description": "students.permissions",
        "peekOfCode": "class StudentListPermission(BasePermission):\n    def has_permission(self, request, view):\n        if request.method in SAFE_METHODS:\n            return True\n        if request.method in [\"PUT\", \"DELETE\"]:\n            return request.user.is_authenticated and request.user.is_student\n        if request.method == 'POST':\n            return not request.user.is_authenticated\n        return super().has_permission(request, view)",
        "detail": "students.permissions",
        "documentation": {}
    },
    {
        "label": "StudentSerializer",
        "kind": 6,
        "importPath": "students.serializers",
        "description": "students.serializers",
        "peekOfCode": "class StudentSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(required=True, source='user.email')\n    password = serializers.CharField(write_only=True)\n    password_confirmation = serializers.CharField(write_only=True)\n    nome = serializers.CharField(required=True, source='name')\n    foto = serializers.ImageField(required=False, source=\"profile_image\")\n    class Meta:\n        model = Student\n        fields = ['id', 'nome', 'password', 'password_confirmation', 'email', 'foto']\n    def validate(self, data):",
        "detail": "students.serializers",
        "documentation": {}
    },
    {
        "label": "StudentProfileImageSerializer",
        "kind": 6,
        "importPath": "students.serializers",
        "description": "students.serializers",
        "peekOfCode": "class StudentProfileImageSerializer(serializers.ModelSerializer):\n    foto = serializers.ImageField(required=True, source='profile_image', write_only=True)\n    class Meta:\n        model = Student\n        fields = [\"foto\"]",
        "detail": "students.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "students.urls",
        "description": "students.urls",
        "peekOfCode": "app_name = 'students'\nurlpatterns = [\n    path('alunos', StudentList.as_view(), name='list'),\n    path('alunos/foto', StudentProfileImageView.as_view(), name='profile-image')\n    # path(\"alunos/agendar-aula/<int:teacher_pk>\", StudentCreateClassRoom.as_view(), name=\"create-classroom\"),\n    # path(\"professores/alunos\", TeacherStudentList.as_view(), name=\"teacher-students\"),\n]",
        "detail": "students.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "students.urls",
        "description": "students.urls",
        "peekOfCode": "urlpatterns = [\n    path('alunos', StudentList.as_view(), name='list'),\n    path('alunos/foto', StudentProfileImageView.as_view(), name='profile-image')\n    # path(\"alunos/agendar-aula/<int:teacher_pk>\", StudentCreateClassRoom.as_view(), name=\"create-classroom\"),\n    # path(\"professores/alunos\", TeacherStudentList.as_view(), name=\"teacher-students\"),\n]",
        "detail": "students.urls",
        "documentation": {}
    },
    {
        "label": "StudentList",
        "kind": 6,
        "importPath": "students.views",
        "description": "students.views",
        "peekOfCode": "class StudentList(APIView):\n    permission_classes = (StudentListPermission,)\n    def post(self, request):\n        serializer = StudentSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    def put(self, request):\n        user = request.user",
        "detail": "students.views",
        "documentation": {}
    },
    {
        "label": "StudentProfileImageView",
        "kind": 6,
        "importPath": "students.views",
        "description": "students.views",
        "peekOfCode": "class StudentProfileImageView(APIView):\n    def post(self, request):\n        user = request.user\n        try:\n            student = Student.objects.get(user=user)\n        except Student.DoesNotExist:\n            return Response({\"error\": \"Aluno não encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = StudentProfileImageSerializer(student, data=request.data)\n        if serializer.is_valid():\n            serializer.save()",
        "detail": "students.views",
        "documentation": {}
    },
    {
        "label": "TeacherListBase",
        "kind": 6,
        "importPath": "teachers.tests.base.test_base_teacherlist_view",
        "description": "teachers.tests.base.test_base_teacherlist_view",
        "peekOfCode": "class TeacherListBase(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.url = reverse('teachers:list')\n        # Criar um usuário\n        self.user = User.objects.create_user(email='teacher@example.com', password='@Password1234', is_teacher=True)\n        self.teacher = Teacher.objects.create(\n            user=self.user,\n            name='John Doe',\n            description='A nice teacher',",
        "detail": "teachers.tests.base.test_base_teacherlist_view",
        "documentation": {}
    },
    {
        "label": "TeacherDetailTests",
        "kind": 6,
        "importPath": "teachers.tests.test_teacherdetail_view",
        "description": "teachers.tests.test_teacherdetail_view",
        "peekOfCode": "class TeacherDetailTests(TeacherListBase):\n    def test_get_teacher_search_for_id(self):\n        response = self.client.get(reverse('teachers:detail', args=[self.teacher.id]))\n        serializer = TeacherSerializer(self.teacher)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data, serializer.data)",
        "detail": "teachers.tests.test_teacherdetail_view",
        "documentation": {}
    },
    {
        "label": "TeacherListTests",
        "kind": 6,
        "importPath": "teachers.tests.test_teacherlist_view",
        "description": "teachers.tests.test_teacherlist_view",
        "peekOfCode": "class TeacherListTests(TeacherListBase):\n    def test_get_teachers(self):\n        response = self.client.get(self.url)\n        teachers = Teacher.objects.all()\n        serializer = TeacherSerializer(teachers, many=True)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data, serializer.data)\n    def test_post_teacher(self):\n        data = {\n            \"nome\": \"Jane Doe\",",
        "detail": "teachers.tests.test_teacherlist_view",
        "documentation": {}
    },
    {
        "label": "TeacherAdmin",
        "kind": 6,
        "importPath": "teachers.admin",
        "description": "teachers.admin",
        "peekOfCode": "class TeacherAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user_email', 'user_name', 'hourly_price']\n    search_fields = ['user__email', 'user__name']\n    list_filter = ['hourly_price']\n    def user_email(self, obj):\n        return obj.user.email\n    user_email.admin_order_field = 'user__email'  # Permite ordenar por este campo no admin\n    user_email.short_description = 'Email'\n    def user_name(self, obj):\n        return obj.user.name",
        "detail": "teachers.admin",
        "documentation": {}
    },
    {
        "label": "SubjectAdmin",
        "kind": 6,
        "importPath": "teachers.admin",
        "description": "teachers.admin",
        "peekOfCode": "class SubjectAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name']\n    search_fields = ['name']\nadmin.site.register(Teacher, TeacherAdmin)\nadmin.site.register(Subject, SubjectAdmin)",
        "detail": "teachers.admin",
        "documentation": {}
    },
    {
        "label": "TeachersConfig",
        "kind": 6,
        "importPath": "teachers.apps",
        "description": "teachers.apps",
        "peekOfCode": "class TeachersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"teachers\"",
        "detail": "teachers.apps",
        "documentation": {}
    },
    {
        "label": "TeacherListPermission",
        "kind": 6,
        "importPath": "teachers.permissions",
        "description": "teachers.permissions",
        "peekOfCode": "class TeacherListPermission(BasePermission):\n    def has_permission(self, request, view):\n        if request.method in SAFE_METHODS:\n            return True\n        if request.method in ('PUT', 'PATCH', 'DELETE'):\n            return request.user.is_authenticated and request.user.is_teacher\n        if request.method == 'POST':\n            return not request.user.is_authenticated\n        return super().has_permission(request, view)",
        "detail": "teachers.permissions",
        "documentation": {}
    },
    {
        "label": "SubjectSerializer",
        "kind": 6,
        "importPath": "teachers.serializers",
        "description": "teachers.serializers",
        "peekOfCode": "class SubjectSerializer(serializers.ModelSerializer):\n    nome = serializers.CharField(required=True, max_length=255, source='name')\n    class Meta:\n        model = Subject\n        fields = (\"id\", \"nome\")\n    def validate(self, attrs):\n        name = attrs.get('name')\n        if not name or name.isdigit():\n            raise serializers.ValidationError({\"nome\": \"O nome deve ser um texto válido e não pode ser apenas números.\"})\n        if Subject.objects.filter(name=name).exists():",
        "detail": "teachers.serializers",
        "documentation": {}
    },
    {
        "label": "TeacherSerializer",
        "kind": 6,
        "importPath": "teachers.serializers",
        "description": "teachers.serializers",
        "peekOfCode": "class TeacherSerializer(serializers.ModelSerializer):\n    nome = serializers.CharField(required=True, source=\"name\")\n    email = serializers.EmailField(required=True, source='user.email')\n    password = serializers.CharField(write_only=True)\n    password_confirmation = serializers.CharField(write_only=True)\n    descricao = serializers.CharField(required=True, source=\"description\")\n    idade = serializers.IntegerField(required=True, source=\"age\")\n    valor_hora = serializers.DecimalField(required=True, source=\"hourly_price\", max_digits=6, decimal_places=2)\n    materias = serializers.ListField(child=serializers.IntegerField(), required=True, source=\"subjects\")\n    materias_objetos = SubjectSerializer(many=True, source=\"subjects\", read_only=True)",
        "detail": "teachers.serializers",
        "documentation": {}
    },
    {
        "label": "TeacherProfileImageSerializer",
        "kind": 6,
        "importPath": "teachers.serializers",
        "description": "teachers.serializers",
        "peekOfCode": "class TeacherProfileImageSerializer(serializers.ModelSerializer):\n    foto = serializers.ImageField(\n        required=True, write_only=True, source=\"profile_image\"\n    )\n    class Meta:\n        model = Teacher\n        fields = [\"foto\"]",
        "detail": "teachers.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "teachers.urls",
        "description": "teachers.urls",
        "peekOfCode": "app_name = \"teachers\"\nrouter = SimpleRouter(trailing_slash=False)\nrouter.register(r'materias', SubjectsList, basename='subjects')\nurlpatterns = [\n    path(\"professores\", TeacherList.as_view(), name=\"list\"),\n    path(\"professores/<int:pk>\", TeacherDetail.as_view(), name=\"detail\"),\n    path('me', MeView.as_view(), name='me'),\n    path(\"professores/foto\", TeacherProfileImageView.as_view(), name=\"profile-image\"),\n    path(\"professores/<int:pk>/materias\", TeacherListForSubjects.as_view(), name=\"list-for-professores\"),\n    path('', include(router.urls))",
        "detail": "teachers.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "teachers.urls",
        "description": "teachers.urls",
        "peekOfCode": "router = SimpleRouter(trailing_slash=False)\nrouter.register(r'materias', SubjectsList, basename='subjects')\nurlpatterns = [\n    path(\"professores\", TeacherList.as_view(), name=\"list\"),\n    path(\"professores/<int:pk>\", TeacherDetail.as_view(), name=\"detail\"),\n    path('me', MeView.as_view(), name='me'),\n    path(\"professores/foto\", TeacherProfileImageView.as_view(), name=\"profile-image\"),\n    path(\"professores/<int:pk>/materias\", TeacherListForSubjects.as_view(), name=\"list-for-professores\"),\n    path('', include(router.urls))\n]",
        "detail": "teachers.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "teachers.urls",
        "description": "teachers.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"professores\", TeacherList.as_view(), name=\"list\"),\n    path(\"professores/<int:pk>\", TeacherDetail.as_view(), name=\"detail\"),\n    path('me', MeView.as_view(), name='me'),\n    path(\"professores/foto\", TeacherProfileImageView.as_view(), name=\"profile-image\"),\n    path(\"professores/<int:pk>/materias\", TeacherListForSubjects.as_view(), name=\"list-for-professores\"),\n    path('', include(router.urls))\n]",
        "detail": "teachers.urls",
        "documentation": {}
    },
    {
        "label": "TeacherList",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class TeacherList(APIView):\n    permission_classes = (TeacherListPermission,)\n    def get(self, request):\n        q = request.query_params.get(\"q\", \"\")\n        if q != '':\n            teachers = Teacher.objects.filter(description__icontains=q)\n        else:\n            teachers = Teacher.objects.all()    \n        serializer = TeacherSerializer(teachers, many=True, context={'request_method': request.method})\n        return Response(serializer.data)",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "TeacherProfileImageView",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class TeacherProfileImageView(APIView):\n    permission_classes = (IsAuthenticated,)\n    def post(self, request):\n        user = request.user\n        try:\n            teacher = Teacher.objects.get(user=user)\n        except Teacher.DoesNotExist:\n            return Response({\"error\": \"Professor não encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = TeacherProfileImageSerializer(teacher, data=request.data)\n        serializer.is_valid(raise_exception=True)",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "TeacherDetail",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class TeacherDetail(APIView):\n    def get(self, request, pk):\n        teacher = get_object_or_404(Teacher.objects.all(), pk=pk)\n        serializer = TeacherSerializer(teacher)\n        return Response(serializer.data)\nclass MeView(APIView):\n    permission_classes = (IsAuthenticated,)\n    def get(self, request):\n        user = request.user\n        try:",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "MeView",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class MeView(APIView):\n    permission_classes = (IsAuthenticated,)\n    def get(self, request):\n        user = request.user\n        try:\n            teacher = Teacher.objects.get(user=user)\n        except Teacher.DoesNotExist:\n            return Response({\"error\": \"Professor não encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = TeacherSerializer(teacher)\n        return Response(serializer.data)",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "TeacherListForSubjects",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class TeacherListForSubjects(APIView):\n    def get(self, request, pk):\n        subject = get_object_or_404(Subject.objects.all(), pk=pk)\n        teachers = subject.teachers.all()\n        serializer = TeacherSerializer(teachers, many=True)\n        return Response(serializer.data)\nclass SubjectsList(viewsets.ModelViewSet):\n    queryset = Subject.objects.all()\n    serializer_class = SubjectSerializer\n    http_method_names = [\"get\", \"post\", \"put\", \"delete\"]",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "SubjectsList",
        "kind": 6,
        "importPath": "teachers.views",
        "description": "teachers.views",
        "peekOfCode": "class SubjectsList(viewsets.ModelViewSet):\n    queryset = Subject.objects.all()\n    serializer_class = SubjectSerializer\n    http_method_names = [\"get\", \"post\", \"put\", \"delete\"]\n    def get_queryset(self):\n        code = self.request.query_params.get(\"code\", None)\n        name = self.request.query_params.get(\"name\", None)\n        if code is not None:\n            print(f\"Filtrando por código: {code}\")\n            return Subject.objects.filter(code=code)",
        "detail": "teachers.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"setup.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "verificar_email_valido",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def verificar_email_valido(email):\n    try:\n        validate_email(email)\n        return True\n    except ValidationError:\n        return False",
        "detail": "utils",
        "documentation": {}
    }
]